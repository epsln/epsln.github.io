<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on epsilon dumblog</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on epsilon dumblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2024 15:30:17 +0200</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Buddhabrot, domain coloring, fractal flames and nevroses</title>
      <link>/blog/buddhalog/</link>
      <pubDate>Fri, 12 Apr 2024 15:30:17 +0200</pubDate>
      
      <guid>/blog/buddhalog/</guid>
      <description>For the past year or so, I have been working on a buddhabrot using the lambda function, defined by
$$ f_r(z) = r * z * (1 - z) $$
With \(r, z \in \mathbb C\). The goal initially was to simply compute an image (which I will refer to by the Buddhalog from now on) using the Buddhabrot technique, created by Melinda Green. A buddhabrot is a way to show the trajectories of points under iteration of a map: it&amp;rsquo;s an histogram of trajectories.</description>
    </item>
    
    <item>
      <title>Complex Bifurcation Diagrams and Hilbert Curves</title>
      <link>/blog/complexbifmap/</link>
      <pubDate>Mon, 13 Mar 2023 16:29:08 +0100</pubDate>
      
      <guid>/blog/complexbifmap/</guid>
      <description>Bifurcation diagrams A bifurcation diagram is a pretty great way to observe the dynamics of a parametrized one dimensional map. On the x-axis, the parameter and on the y axis is shown the trajectory of the point after a few iteration (so that the system settle down into the attractor). For example, with the logistic map :
$$x_{n+1} = r * x_{n} (1 - x_{n}), r, x_0 \in \mathbb[R] $$</description>
    </item>
    
    <item>
      <title>Indras Pearl III : Searching for a place to stop</title>
      <link>/blog/indraspearl_pt3/</link>
      <pubDate>Tue, 04 May 2021 00:23:07 +0200</pubDate>
      
      <guid>/blog/indraspearl_pt3/</guid>
      <description>In the past article we&amp;rsquo;ve seen an overview of what kind of objects we were talking about, and how to create generators that would be interesting to explore. In this part, we&amp;rsquo;ll talk about the bread and butter of Indra&amp;rsquo;s Pearl, namely the Depth First Exploration Algorithm, or DFS. For the sake of simplicity, i&amp;rsquo;ll refer to the inverse of a generator using the uppercase version of it&amp;rsquo;s associated letter, so the inverse of a is A, and the inverse of b is B.</description>
    </item>
    
    <item>
      <title>Indras Pearl II: Generating the Generators</title>
      <link>/blog/indraspearl_pt2/</link>
      <pubDate>Mon, 01 Mar 2021 17:05:25 +0100</pubDate>
      
      <guid>/blog/indraspearl_pt2/</guid>
      <description>This post is a part of a series where I try to explain my work on implementing methods from the book &amp;ldquo;Indra&amp;rsquo;s Pearl&amp;rdquo;, from Mumford, Series and Wright. In the first part I talked about the very basics. If you haven&amp;rsquo;t read it, I&amp;rsquo;d recommend it, simply because I really like it, and also because you might not understand what I&amp;rsquo;m talking about.
In this post we&amp;rsquo;ll talk about how we chose the specific MÃ¶bius Transform that we&amp;rsquo;ll use for our exploration.</description>
    </item>
    
    <item>
      <title>Indra&#39;s Pearl, or Quasifuschian Two Generator Groups explained by someone completely out of his depths</title>
      <link>/blog/indraspearl_pt1/</link>
      <pubDate>Thu, 18 Feb 2021 16:47:37 +0100</pubDate>
      
      <guid>/blog/indraspearl_pt1/</guid>
      <description>A few months back I started reading Indra&amp;rsquo;s Pearl by Mumford, Series and Wright. The book is amazing, and I&amp;rsquo;m not scared to say it&amp;rsquo;s one of my favorite books about Maths that I&amp;rsquo;ve ever read. I wanted to get my hands dirty and implement some of the fractals in the book, since they were very different from the usual &amp;ldquo;Mandelbrot and cousins&amp;rdquo; fractals: they were truly out of this world.</description>
    </item>
    
    <item>
      <title>Arnold and its Tongues</title>
      <link>/blog/tongues/</link>
      <pubDate>Tue, 16 Feb 2021 00:04:25 +0100</pubDate>
      
      <guid>/blog/tongues/</guid>
      <description>Hi, I&amp;rsquo;m back. I have been working a lot on my Indra&amp;rsquo;s Pearl implementation, available here. I&amp;rsquo;ll write an article about it soon, since it&amp;rsquo;s pretty interesting, but not now. Now we&amp;rsquo;re talking about tongues. Code is available here
The Arnold Tongue(s) are a particular kind of fractal that arises when we plot the rotation number of a particular circle map. Circle maps are functions from the circle to itself. They are particularly conducive to chaotic motions, and are pretty simple so it&amp;rsquo;s a good start.</description>
    </item>
    
    <item>
      <title>Complex Plots of Fixed Points of Iterated Polynomials</title>
      <link>/blog/complesplots/</link>
      <pubDate>Wed, 20 Jan 2021 16:21:39 +0100</pubDate>
      
      <guid>/blog/complesplots/</guid>
      <description>A fairly long title for this one, but I can&amp;rsquo;t always be Victor Hugo when it comes to posts titles. We&amp;rsquo;re gonna talk about complex dynamics in this one, so stay strapped.
When I first started learning about Discrete Dynamics, an exercise that would often come up would be to find the fixed point of the nth iteration of the logistic map, or put it simply solving the following equation:</description>
    </item>
    
    <item>
      <title>Blancmange</title>
      <link>/blog/blancmange/</link>
      <pubDate>Thu, 14 Jan 2021 16:16:35 +0100</pubDate>
      
      <guid>/blog/blancmange/</guid>
      <description>Another short and sweet post on some pathological curve that I spent a good afternoon coding back in 2018. It&amp;rsquo;s called a &amp;ldquo;Blancmange curve&amp;rdquo; apparently in relation to some french cake. Well I&amp;rsquo;m French and I don&amp;rsquo;t think I&amp;rsquo;ve ever eaten any self similar cakes. Doesn&amp;rsquo;t sounds that good actually.Cake or not, the code is available here.
Anyway, this curve is defined as an infinite sum of smaller and smaller triangle waves.</description>
    </item>
    
    <item>
      <title>The Devil&#39;s Staircase</title>
      <link>/blog/devilstaircase/</link>
      <pubDate>Mon, 11 Jan 2021 21:27:34 +0100</pubDate>
      
      <guid>/blog/devilstaircase/</guid>
      <description>Today, just a quickie. The Devil&amp;rsquo;s Staircase (or Cantor Function) is a particular &amp;ldquo;pathological&amp;rdquo; function. It grows from 0 to 1 as \(x\) goes from 0 to 1, but it&amp;rsquo;s derivative are 0 almost everywhere. Meaning, that everywhere you zoom, you&amp;rsquo;ll get a flat line. Yet it goes up. Yet it&amp;rsquo;s flat almost everywhere ! Code? Here!.
Here, we generate the Devil&amp;rsquo;s Staircase using a particular Circle Map
$$\phi_{n+1} = \phi_n - \frac{K * sin(2 * \pi * phi_n)}{2 * \pi} $$</description>
    </item>
    
    <item>
      <title>Chaos in Logic</title>
      <link>/blog/chaoticlogic/</link>
      <pubDate>Sat, 09 Jan 2021 00:13:28 +0100</pubDate>
      
      <guid>/blog/chaoticlogic/</guid>
      <description>Keeping up with the traditions I&amp;rsquo;ve set-up a few days ago, we&amp;rsquo;re going to talk about chaos. &amp;ldquo;Oh no, yet another boring example of a Henon map ? Maybe with colors this time ? Or just the Lorentz Attractor with some platitudes on the chaos in life itself ?&amp;rdquo;, you may say, snarkily. Well, voices in my head, no, not quite.
I kinda dig logic as a field. And by &amp;ldquo;dig&amp;rdquo;, I mean looking from afar and vaguely nodding when someones talks to me about consistency of a formal system.</description>
    </item>
    
    <item>
      <title>Chaos in Bits</title>
      <link>/blog/chaosbits/</link>
      <pubDate>Thu, 07 Jan 2021 15:01:47 +0100</pubDate>
      
      <guid>/blog/chaosbits/</guid>
      <description>One of the things I try a lot is to make cool looking images with the least effort on my part. The easiest way to do that is to let the computer do my work. At least, that&amp;rsquo;s the theory; in practice I spend a lot of time tweaking the various functions and tidbits that make the final product. Maybe some day I&amp;rsquo;ll just paint the individual pixel myself, it&amp;rsquo;ll probably be a bit less trouble.</description>
    </item>
    
    <item>
      <title>Bifurcation Diagrams</title>
      <link>/blog/biffmap/</link>
      <pubDate>Tue, 05 Jan 2021 16:49:57 +0100</pubDate>
      
      <guid>/blog/biffmap/</guid>
      <description>This time we&amp;rsquo;re gonna talk about things I know a little bit more about : bifurcation diagrams and iterated functions. The code is available here
Bifurcation diagrams show the behavior of a function \( f: \mathbb{R} \rightarrow \mathbb{R} \), with a real parameter under iteration. Iteration simply means &amp;ldquo;plugging the output into the input&amp;rdquo;: a feedback if you will. Iterating from a &amp;ldquo;seed&amp;rdquo; \(p\), the function can converge to a value (i.</description>
    </item>
    
    <item>
      <title>Gaussians Primes</title>
      <link>/blog/gaussints/</link>
      <pubDate>Tue, 29 Dec 2020 18:54:18 +0100</pubDate>
      
      <guid>/blog/gaussints/</guid>
      <description>On this second episode of &amp;ldquo;what has Epsilon done for the past years&amp;rdquo;, we&amp;rsquo;re gonna talk about&amp;hellip; Prime Numbers. Code is available here.
The primes does have this capacity to create some interesting looking things, I&amp;rsquo;ll give them that. The Gaussian integers are simply complex numbers whose real and imaginary part are integers, and whose modulus is prime. If one component of this number p is 0, then p is prime only if the other component is prime and p % 4 = 3.</description>
    </item>
    
    <item>
      <title>Ulam Spiral</title>
      <link>/blog/ullam/</link>
      <pubDate>Mon, 28 Dec 2020 18:38:23 +0100</pubDate>
      
      <guid>/blog/ullam/</guid>
      <description>This post is the first part of an attempt at explaining most of the small animations I have done in the past few years.
The Ulam Spiral is fairly straight forward: by arranging the integers in a spiral, and only marking the primes, you obtain strange, and frankly cool looking patterns.
Creating this sort of image is very simple. I simply created a basic loop that construct the spiral, which follows the following pattern: ULDDRRRUUUULLLL&amp;hellip;, assigning an integer to each step and checking if it was prime.</description>
    </item>
    
    <item>
      <title>Chapter 0: Introduction to epsilon</title>
      <link>/blog/intro/</link>
      <pubDate>Tue, 22 Dec 2020 23:09:32 +0100</pubDate>
      
      <guid>/blog/intro/</guid>
      <description>Hi. I&amp;rsquo;m Epsilon, and this is a blog.
I&amp;rsquo;m a Computer Engineer, specialised in Machine Learning and Computer Vision. Most of my research works centers around automated detection in Archaeology. I have introduced the use of YOLO in LiDAR detection for this purpose, in a research internship at the University of Leiden. I have also worked in rare event detection in train borne systems at the SNCF-CIM. I also have quite the experience in social media intelligence, i.</description>
    </item>
    
  </channel>
</rss>
